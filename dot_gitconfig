[user]
	name = Alan Matuszczak
	email = contact@alanmatuszczak.me
  signingKey = ~/.ssh/strong-box-alan.pub
	#signingKey = key::ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPGTKTGtn4C6XwHkK6YjhukPRii8DkLoX+I1Yusbsrfx alan@fedora

[core]
  editor = nvim
  pager = cat
  whitespace = -trailing-space

[gpg]
  format = ssh

[commit]
  gpgSign = true

[tag]
  gpgSign = true

[color]
  # Enable colors in color-supporting terminals
  ui = auto

[diff]
  # Use better, descriptive initials (c, i, w) instead of a/b.
  mnemonicPrefix = true
  # Show renames/moves as such
  renames = true
  # When using --word-diff, assume --word-diff-regex=.
  wordRegex = .
  # Display submodule-related information (commit listings)
  submodule = log
  # Use VSCode as default diff tool when running `git diff-tool`
  tool = vscode
[difftool "vscode"]
  cmd = code --wait --diff $LOCAL $REMOTE

[fetch]
  # Auto-fetch submodule changes (sadly, won't auto-update)
  recurseSubmodules = on-demand
  prune = true

[mergetool]
  # Clean up backup files created by merge tools on tool exit
  keepBackup = false
  # Clean up temp files created by merge tools on tool exit
  keepTemporaries = false
  # Put the temp files in a dedicated dir anyway
  writeToTemp = true
  # Auto-accept file prompts when launching merge tools
  prompt = false

[pull]
  rebase = true
  rebase = merges

[push]
	# push only the current branch to the remote (and create the branch
	# on the remote if it does not already exist there)
	default = current

	# push tags missing from remote
	# See https://git-scm.com/docs/git-push#git-push---follow-tags
	followTags = true
	autoSetupRemote = true

[rebase]
	autoStash = true

[status]
  # Display submodule rev change summaries in status
  submoduleSummary = true
  # Recursively traverse untracked directories to display all contents
  showUntrackedFiles = all

[alias]
  log-graph1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  log-graph2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  co = checkout
  ci = commit
  st = status
  br = branch
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  type = cat-file -t
  dump = cat-file -p
  fakap = commit -C HEAD --amend
  force-push = push --force-with-lease
  mergeRepo = "!mergeRepo() { \
  [ $# -ne 3 ] && echo \"Three parameters required, <remote URI> <new branch> <new dir>\" && exit 1; \
  git remote add newRepo $1; \
  git fetch newRepo; \
  git branch \"$2\" newRepo/master; \
  git checkout \"$2\"; \
  mkdir -vp \"${GIT_PREFIX}$3\"; \
  git ls-tree -z --name-only HEAD | xargs -0 -I {} git mv {} \"${GIT_PREFIX}$3\"/; \
  git commit -m \"Moved files to '${GIT_PREFIX}$3'\"; \
  git checkout master; git merge --allow-unrelated-histories --no-edit -s recursive -X no-renames \"$2\"; \
  git branch -D \"$2\"; git remote remove newRepo; \
}; \
mergeRepo"

[diff "sopsdiffer"]
	textconv = sops -d

[init]
    defaultBranch = main
